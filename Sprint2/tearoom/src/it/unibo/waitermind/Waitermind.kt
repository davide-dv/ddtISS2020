/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var FreeTables = 0		
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("Waiter Mind: Started")
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("listening") { //this:State
					action { //it:State
						println("Waiter Mind: Listening")
						stateTimer = TimerActor("timer_listening", 
							scope, context!!, "local_tout_waitermind_listening", 5000.toLong() )
					}
					 transition(edgeName="t00",targetState="goHome",cond=whenTimeout("local_tout_waitermind_listening"))   
					transition(edgeName="t01",targetState="tableCheck",cond=whenRequest("enterrequest"))
					transition(edgeName="t02",targetState="transmitToBarman",cond=whenRequest("order"))
					transition(edgeName="t03",targetState="getTea",cond=whenReply("teaReady"))
					transition(edgeName="t04",targetState="reachTableForPayement",cond=whenRequest("paymentRequest"))
				}	 
				state("tableCheck") { //this:State
					action { //it:State
						println("Waiter Mind: Checking tables")
						request("askFreeTables", "askFreeTables(tables)" ,"tearoom" )  
					}
					 transition(edgeName="t35",targetState="evaluateFreeTables",cond=whenReply("replyFreeTables"))
				}	 
				state("evaluateFreeTables") { //this:State
					action { //it:State
						println("Waiter Mind: Evaluating the number of free tables")
						if( checkMsgContent( Term.createTerm("replyFreeTables(N_TABLES)"), Term.createTerm("replyFreeTables(N_TABLES)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 FreeTables = payloadArg(0).toInt()  
								println("Free tables: $FreeTables")
						}
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitchGuarded({ FreeTables > 0  
					}) )
					transition( edgeName="goto",targetState="refuse", cond=doswitchGuarded({! ( FreeTables > 0  
					) }) )
				}	 
				state("refuse") { //this:State
					action { //it:State
						println("REFUSE")
					}
				}	 
				state("accept") { //this:State
					action { //it:State
						println("Waiter Mind: Accepting client")
						answer("enterrequest", "enterreply", "enterreply(1,enter,0)"   )  
					}
					 transition( edgeName="goto",targetState="reachEntrance", cond=doswitch() )
				}	 
				state("reachEntrance") { //this:State
					action { //it:State
						println("Waiter Mind: Reaching Entrance")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="convoyClient", cond=doswitch() )
				}	 
				state("convoyClient") { //this:State
					action { //it:State
						println("Waiter Mind: Reaching Table")
						delay(1000) 
						updateResourceRep( "atTable"  
						)
						forward("atTable", "atTable(1)" ,"client" ) 
						emit("tableOccupied", "tableOccupied(1)" ) 
						delay(500) 
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("transmitToBarman") { //this:State
					action { //it:State
						println("Waiter Mind: Transmitting order to barman")
						request("transmitOrder", "transmitOrder(tea)" ,"barman" )  
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("getTea") { //this:State
					action { //it:State
						println("Waiter Mind: Going to get the tea")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="serveClient", cond=doswitch() )
				}	 
				state("serveClient") { //this:State
					action { //it:State
						println("Waiter Mind: Going to serve the client")
						delay(2000) 
						answer("order", "receiveTea", "receiveTea(tea)"   )  
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("reachTableForPayement") { //this:State
					action { //it:State
						println("Waiter Mind: Going to the table for collecting payment")
						delay(1000) 
						answer("paymentRequest", "readyForPayment", "readyForPayment(ready)"   )  
					}
					 transition( edgeName="goto",targetState="collectPayment", cond=doswitch() )
				}	 
				state("collectPayment") { //this:State
					action { //it:State
						println("Waiter Mind: Collecting the payment")
					}
					 transition(edgeName="t26",targetState="convoyAtExit",cond=whenDispatch("payment"))
				}	 
				state("convoyAtExit") { //this:State
					action { //it:State
						println("Waiter Mind: Taking the client to the exit")
						delay(1000) 
						forward("atExit", "atExit(exit)" ,"client" ) 
					}
					 transition( edgeName="goto",targetState="reachTableForCleaning", cond=doswitch() )
				}	 
				state("reachTableForCleaning") { //this:State
					action { //it:State
						println("Waiter Mind: Going to clean the table")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="cleanTable", cond=doswitch() )
				}	 
				state("cleanTable") { //this:State
					action { //it:State
						println("Waiter Mind: Cleaning the table")
						delay(1000) 
						emit("tableCleaned", "tableCleaned(1)" ) 
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("goHome") { //this:State
					action { //it:State
						println("Waiter Mind: Going home")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
			}
		}
}
