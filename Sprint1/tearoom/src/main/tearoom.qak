/* 
 * ================================================================================
 * waiter.qak
 * VERSION June 1, 2020 
 * 
 * External MQTT sites:
 * 	"mqtt.eclipse.org:  mosquitto.org mqtt.fluux.io  broker.hivemq.com
 * ================================================================================
 */ 

 
System   tearoom


// client --> smartbell 
Dispatch notify : notify(X)
// smartbell --> client : show on display (temperature, ID, maxwait)

// smartbell --> waiter
Request enterRequest : enterRequest(X)
// waiter --> smartbell
Reply accept : accept(X)	
Reply inform : inform(MAX_WAIT)
// client --> waiter
Dispatch order : order(TEA, CLIENT_ID)
// waiter --> barman
Dispatch transmitOrder : transmitOrder(TEA, TABLE)
// barman --> waiter
Dispatch teaReady : teaReady(TABLE)
// client --> waiter
Dispatch payment : payment(TABLE)
// ???
Dispatch maxStayTimeExpired : maxStayTimeExpired(TABLE)

// ----- walker ------
	
Request  movetoCell : movetoCell(X,Y)
Reply    atcell     : atcell(X,Y)
Reply	 walkbreak  : walkbreak(X,Y) 

Dispatch cmd       : cmd(MOVE)
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(V) 

Context ctxtearoom   ip [host="192.168.1.125" port=8050]
Context ctxbasicrobot   ip [host="localhost" port=8020]




ExternalQActor basicrobot context ctxbasicrobot


  
QActor waiter context ctxtearoom {  
	[# 
		var Table1 = "clean"	
		var Table2 = "clean"		
		
		val TableMapping = arrayOf<String>("", "")
		//val TableMapping = emptyArray<String>(2)		
		val MaxTime = 1000			
		val map = "teaRoomExplored"
		var CurrentClientID = ""
		
		val EntranceX = 1
		val EntranceY = 4 
		val Table1X = 2
		val Table1Y = 2 
		val Table2X = 2 
		val Table2Y = 4
		val ExitX = 5
		val ExitY = 4
		val BarmanX = 5
 		val BarmanY = 0
 		val HomeX = 0
 		val HomeY = 0
		
		
	#]
	
	State start initial {
		println("Waiter  : Started")
		
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap(map) 		
		run itunibo.planner.plannerUtil.showCurrentRobotState()	
		
		
		
	} Goto handleRequest
	
	State handleRequest {
		println("Waiter  : Listening")			
	} Transition t0 //whenTime 30000 -> goHome 
					whenRequest enterRequest -> tableCheck
					whenMsg order -> transmitToBarman
					whenMsg teaReady -> serve
					whenMsg payment -> collect	
					whenMsg maxStayTimeExpired -> collect
	
	State tableCheck {   
		println("Waiter  : Checking tables")				
		
		onMsg (enterRequest : enterRequest(CLIENT_ID)) {
			[# CurrentClientID = payloadArg(0) #]
		}
		
		delay 1000
		if [# Table1 == "clean" || Table2 == "clean" #] { 
			replyTo enterRequest with accept : accept(X)
		} else {
			replyTo enterRequest with inform : inform($MaxTime)
		}			
			
	} Goto reachEntrance if [# Table1 == "clean" || Table2 == "clean" #] else handleRequest
	
	State reachEntrance {	 
		println("Waiter  : Reaching Entrance")	
		request walker -m movetoCell : movetoCell($EntranceX, $EntranceY)		
	} Transition t0 whenReply atcell -> convoyClient
	
	State convoyClient {  
		println("Waiter  : Reaching Table")		
		request walker -m movetoCell : movetoCell($Table1X, $Table1Y)
		[# 
			Table1 = "dirty" 
			TableMapping.set(0, CurrentClientID)			
		#]
		updateResource [#"Table1: " + Table1 + " - " + TableMapping.toString() #]
		
	} Transition t0 whenReply atcell -> handleRequest
	
	State transmitToBarman {
		println("Waiter  : Transmitting order to barman")
		onMsg (order : order(TEA, CLIENT_ID)) {
			[#  
				val Tea = payloadArg(0)
				val Table = TableMapping.indexOf(payloadArg(1)).toString()				 
			#]
			forward barman -m transmitOrder : transmitOrder($Tea, $Table)			
		}		
	} Goto handleRequest
	
	State serve {
		println("Waiter  : Going to serve the client")
		// qui ci sarÃ  una onMsg per decidere il tavolo (salvare in una variabile globale)		
		
		request walker -m movetoCell : movetoCell($BarmanX, $BarmanY)
	
	} Transition t0 whenReply atcell -> deliverTea
	
	State deliverTea {
		println("Waiter  : delivering tea")
		// prendere il tavolo dalla variabile globale
		request walker -m movetoCell : movetoCell($Table1X, $Table1Y)		
	} Transition t0 whenReply atcell -> handleRequest
	
	State collect{
		println("Waiter  : Collecting the payment")	
		request walker -m movetoCell : movetoCell($Table1X, $Table1Y)	
	} Transition t0 whenReply atcell -> convoyAtExit  
	
	State convoyAtExit {
		println("Waiter  : Taking the client to the exit")
		request walker -m movetoCell : movetoCell($ExitX, $ExitY)				
	} Transition t0 whenReply atcell -> cleanTable	
	
	State cleanTable {
		updateResource [# "Exit Reached" #]
		println("Waiter  : Cleaning the table")		
		request walker -m movetoCell : movetoCell($Table1X, $Table1Y) // variabile globale
	} Transition t0 whenReply atcell -> setTableClean
	
	State setTableClean {
		println("Waiter  : the table is clean")		
		[# Table1 = "clean" #]	// variabile globale	
		updateResource [# Table1 #]	
	} Goto handleRequest	
	
	State goHome { 
		println("Waiter  : Going home")
		request walker -m movetoCell : movetoCell($HomeX, $HomeY) 
	} Transition t0 whenReply atcell -> handleRequest    
 }
 
 QActor smartbell context ctxtearoom {
 	
 	[# var CurrentID = 0 #]
 	
 	State handleRequest initial {
 		println("Smart Bell: Start and listening") 	
 		updateResource [# "handleRequest" #] 	
 	} Transition t0 whenMsg notify -> checkTemperature	
 					whenReply accept -> showWaiterResponse
 	
 	State checkTemperature {
 		println("Smart Bell: Checking client temperature") 	
 		[# var Temperature = 35 #]
 		
 		if [# Temperature < 37.5 #] {
 			[# CurrentID ++ #]	 			
 			updateResource [# "$CurrentID --- Temperature_OK" #]
 			request waiter -m enterRequest : enterRequest($CurrentID)
 		} else {
 			updateResource [# "$CurrentID --- Temperature too high" #] 			
 		}
 		delay 500 		
 	} Goto handleRequest 		

 	
 	State showWaiterResponse {
 		println("Smart Bell: Showing waiter response")
 		onMsg (accept : accept(X)) {
 			updateResource [# "$CurrentID --- Enter Now" #]
 		}
 		onMsg (inform : inform(MAX_TIME)) {
 			updateResource [# "$CurrentID --- Wait for " + payloadArg(0) #]
 		} 		
 		delay 1000
 	} Goto handleRequest
}
 
QActor barman context ctxtearoom {	
	
	State waitingOrder initial {
		println("Barman waiting for an order")		
	} Transition t0 whenMsg transmitOrder -> prepareTea 
	
	State prepareTea {
		println("Barman preparing tea")			
		onMsg (transmitOrder : transmitOrder(TEA, TABLE)) {
			println("Barman ---------------- AAAAAAAAAAAAAAAAAAAA")
			[# val CurrentTable = payloadArg(1) #]
			forward waiter -m   teaReady : teaReady(CurrentTable)
		}		
	} Goto waitingOrder	
} 

QActor walker context ctxtearoom {
	
	[#
		var DestX = 0
		var DestY = 0 	
		
		var CurrentMove = ""		
		//val StepTime = 380L
		val StepTime = 360L	
		var obstacleFound = false
		val BackTime = 2 * StepTime / 3
	
	#]
	
	
	State handleCommand initial {
		println("Walker: started and waiting for commands")
	} Transition t0 whenRequest movetoCell -> walk
	
	State walk {
		println("Walker: walking")
		onMsg (movetoCell : movetoCell(X, Y)) {
			[#
				DestX = payloadArg(0).toInt()
				DestY = payloadArg(1).toInt()
			#]
			run itunibo.planner.plannerUtil.planForGoal("$DestX","$DestY")			
		}	
	} Goto executePlan if [# itunibo.planner.plannerUtil.existActions() #] else noPlan
	
	State noPlan{
		println("Walker: plan not found")		
	}
	Goto handleCommand
	
	
	State executePlan {
		println("Walker: executing plan")
		[#  CurrentMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
		delay 250
	} Goto moveForward if [# CurrentMove == "w" #] else rotate
	
	State moveForward {
		println("Walker: moving forward")
		request basicrobot -m step : step( $StepTime  )
		
	} Transition t0 whenReply stepdone   -> stepDone   
					whenReply stepfail   -> stepFailed 
	
	
	State stepDone{  
 		println("Walker: step done") 		
 		run itunibo.planner.plannerUtil.updateMap("w")
  	}
	Goto executePlan if [# CurrentMove.length > 0 #] else notifySuccess	

	State notifySuccess{
	    println("Walker: $DestX,$DestY reached")
	    run itunibo.planner.plannerUtil.showCurrentRobotState()
	    replyTo movetoCell with atcell : atcell($DestX,$DestY) 					
	}
	Goto handleCommand
	
	State stepFailed{
		println("Walker: step failed")	
		
		[# obstacleFound = true #] 		
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[# val Duration = payloadArg(0).toLong()  ; val Dt = Math.abs(StepTime-Duration); val BackT = Duration/2 #] 
			println("Walker stepFail Duration = $Duration, BackTime = ${BackTime}")
			if [# Duration > BackTime #] {    
				forward basicrobot -m cmd : cmd( s )
				delayVar BackT
				forward basicrobot -m cmd : cmd( h )
			}	 
 		}
	    run itunibo.planner.plannerUtil.updateMapObstacleOnCurrentDirection() 	
	} Goto handleCommand
	
	State rotate {
		println("Walker: rotating")
		if [# CurrentMove == "l" || CurrentMove == "r"  #]{
  			forward basicrobot -m cmd : cmd($CurrentMove)
 			run itunibo.planner.plannerUtil.updateMap( "$CurrentMove" )
  		} 
		
	} Goto executePlan if [# CurrentMove.length > 0 #] else notifySuccess
	
}





