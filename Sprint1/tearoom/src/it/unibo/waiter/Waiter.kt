/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var Table1 = "clean"	
				var Table2 = "clean"		
				
				val TableMapping = arrayOf<String>("", "")
				//val TableMapping = emptyArray<String>(2)		
				val MaxTime = 1000			
				val map = "teaRoomExplored"
				var CurrentClientID = ""
				
				val EntranceX = 1
				val EntranceY = 4 
				val Table1X = 2
				val Table1Y = 2 
				val Table2X = 2 
				val Table2Y = 4
				val ExitX = 5
				val ExitY = 4
				val BarmanX = 5
		 		val BarmanY = 0
		 		val HomeX = 0
		 		val HomeY = 0
				
				
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("Waiter  : Started")
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( map  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						println("Waiter  : Listening")
					}
					 transition(edgeName="t00",targetState="tableCheck",cond=whenRequest("enterRequest"))
					transition(edgeName="t01",targetState="transmitToBarman",cond=whenDispatch("order"))
					transition(edgeName="t02",targetState="serve",cond=whenDispatch("teaReady"))
					transition(edgeName="t03",targetState="collect",cond=whenDispatch("payment"))
					transition(edgeName="t04",targetState="collect",cond=whenDispatch("maxStayTimeExpired"))
				}	 
				state("tableCheck") { //this:State
					action { //it:State
						println("Waiter  : Checking tables")
						if( checkMsgContent( Term.createTerm("enterRequest(X)"), Term.createTerm("enterRequest(CLIENT_ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentClientID = payloadArg(0)  
						}
						delay(1000) 
						if(  Table1 == "clean" || Table2 == "clean"  
						 ){answer("enterRequest", "accept", "accept(X)"   )  
						}
						else
						 {answer("enterRequest", "inform", "inform($MaxTime)"   )  
						 }
					}
					 transition( edgeName="goto",targetState="reachEntrance", cond=doswitchGuarded({ Table1 == "clean" || Table2 == "clean"  
					}) )
					transition( edgeName="goto",targetState="handleRequest", cond=doswitchGuarded({! ( Table1 == "clean" || Table2 == "clean"  
					) }) )
				}	 
				state("reachEntrance") { //this:State
					action { //it:State
						println("Waiter  : Reaching Entrance")
						request("movetoCell", "movetoCell($EntranceX,$EntranceY)" ,"walker" )  
					}
					 transition(edgeName="t05",targetState="convoyClient",cond=whenReply("atcell"))
				}	 
				state("convoyClient") { //this:State
					action { //it:State
						println("Waiter  : Reaching Table")
						request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
						 
									Table1 = "dirty" 
									TableMapping.set(0, CurrentClientID)			
						updateResourceRep("Table1: " + Table1 + " - " + TableMapping.toString()  
						)
					}
					 transition(edgeName="t06",targetState="handleRequest",cond=whenReply("atcell"))
				}	 
				state("transmitToBarman") { //this:State
					action { //it:State
						println("Waiter  : Transmitting order to barman")
						if( checkMsgContent( Term.createTerm("order(TEA,CLIENT_ID)"), Term.createTerm("order(TEA,CLIENT_ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  
												val Tea = payloadArg(0)
												val Table = TableMapping.indexOf(payloadArg(1)).toString()				 
								forward("transmitOrder", "transmitOrder($Tea,$Table)" ,"barman" ) 
						}
					}
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("serve") { //this:State
					action { //it:State
						println("Waiter  : Going to serve the client")
						request("movetoCell", "movetoCell($BarmanX,$BarmanY)" ,"walker" )  
					}
					 transition(edgeName="t07",targetState="deliverTea",cond=whenReply("atcell"))
				}	 
				state("deliverTea") { //this:State
					action { //it:State
						println("Waiter  : delivering tea")
						request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
					}
					 transition(edgeName="t08",targetState="handleRequest",cond=whenReply("atcell"))
				}	 
				state("collect") { //this:State
					action { //it:State
						println("Waiter  : Collecting the payment")
						request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
					}
					 transition(edgeName="t09",targetState="convoyAtExit",cond=whenReply("atcell"))
				}	 
				state("convoyAtExit") { //this:State
					action { //it:State
						println("Waiter  : Taking the client to the exit")
						request("movetoCell", "movetoCell($ExitX,$ExitY)" ,"walker" )  
					}
					 transition(edgeName="t010",targetState="cleanTable",cond=whenReply("atcell"))
				}	 
				state("cleanTable") { //this:State
					action { //it:State
						updateResourceRep( "Exit Reached"  
						)
						println("Waiter  : Cleaning the table")
						request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
					}
					 transition(edgeName="t011",targetState="setTableClean",cond=whenReply("atcell"))
				}	 
				state("setTableClean") { //this:State
					action { //it:State
						println("Waiter  : the table is clean")
						 Table1 = "clean"  
						updateResourceRep( Table1  
						)
					}
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("goHome") { //this:State
					action { //it:State
						println("Waiter  : Going home")
						request("movetoCell", "movetoCell($HomeX,$HomeY)" ,"walker" )  
					}
					 transition(edgeName="t012",targetState="handleRequest",cond=whenReply("atcell"))
				}	 
			}
		}
}
