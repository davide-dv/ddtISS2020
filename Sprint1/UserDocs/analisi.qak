/* 
 * ================================================================================
 * waiter.qak
 * VERSION June 1, 2020 
 * 
 * External MQTT sites:
 * 	"mqtt.eclipse.org:  mosquitto.org mqtt.fluux.io  broker.hivemq.com
 * ================================================================================
 */ 

 
System   tearoom

// client --> smartbell 
Dispatch notify : notify(X)
// smartbell --> client : show on display (temperature, ID, maxwait)

// smartbell --> waiter
Request enterRequest : enterRequest(X)
// waiter --> smartbell
Reply accept : accept(X)	
Reply inform : inform(MAX_WAIT)
// client --> waiter
Dispatch order : order(TABLE)
// waiter --> barman
Dispatch transmitOrder : transmitOrder(TABLE)
// barman --> waiter
Dispatch teaReady : teaReady(TABLE)
// client --> waiter
Dispatch payment : payment(TABLE)
// ???
Dispatch maxStayTimeExpired : maxStayTimeExpired(TABLE)


Context ctxtearoom   ip [host="localhost" port=8050]
  
QActor waiter context ctxtearoom {  
	[# 
		var FreeTables = 1	
		val MaxTime = 1000	
	#]
	
	State start initial {
		println("Waiter  : Started")
	} Goto handleRequest
	
	State handleRequest {
		println("Waiter  : Listening")			
	} Transition t0 whenTime 5000 -> goHome 
					whenRequest enterRequest -> tableCheck
					whenMsg order -> transmitToBarman
					whenMsg teaReady -> serve
					whenMsg payment -> collect	
					whenMsg maxStayTimeExpired -> collect
	
	State tableCheck {   // request/reply alla tearoom 
		println("Waiter  : Checking tables")				
		
		delay 1000
		if [# FreeTables > 0 #] { 
			replyTo enterRequest with accept : accept(X)
		} else {
			replyTo enterRequest with inform : inform($MaxTime)
		}			
			
	} Goto reachEntrance if [# FreeTables > 0 #] else handleRequest
	
	State reachEntrance {	// dovrà avere un atEntrance dal walker 
		println("Waiter  : Reaching Entrance")		
	} Goto convoyClient
	
	State convoyClient {  // dovrà avere un atTable dal walker 
		println("Waiter  : Reaching Table")			
	} Goto handleRequest
	
	State transmitToBarman {
		println("Waiter  : Transmitting order to barman")
		onMsg (order : order(TABLE)) {
			[# val Table = payloadArg(0) #]
			forward barman -m transmitOrder : transmitOrder($Table)			
		}		
	} Goto handleRequest
	
	State serve { // deve arrivare un messaggio dal walker
		println("Waiter  : Going to serve the client")
	} Goto handleRequest	
	
	State collect{
		println("Waiter  : Collecting the payment")	
	} Goto convoyAtExit  
	
	State convoyAtExit {
		println("Waiter  : Taking the client to the exit")		
	} Goto cleanTable
	
	State cleanTable {
		println("Waiter  : Cleaning the table")		
	} Goto handleRequest
	
	State goHome { // messaggio dal walker 
		println("Waiter  : Going home")
		delay 1000	
	} Goto handleRequest
    
 }
 
 QActor smartbell context ctxtearoom {
 	
 	[# var CurrentID = 0 #]
 	
 	State handleRequest initial {
 		println("Smart Bell: Start and listening") 	
 		updateResource [# "handleRequest" #] 	
 	} Transition t0 whenMsg notify -> checkTemperature	
 					whenReply accept -> showWaiterResponse
 	
 	State checkTemperature {
 		println("Smart Bell: Checking client temperature") 	
 		[# var Temperature = 35 #]
 		
 		if [# Temperature < 37.5 #] {
 			[# CurrentID ++ #]	 			
 			updateResource [# "$CurrentID --- Temperature_OK" #]
 			request waiter -m enterRequest : enterrequest($CurrentID)
 		} else {
 			updateResource [# "$CurrentID --- Temperature too high" #] 			
 		}
 		delay 500 		
 	} Goto handleRequest 		

 	
 	State showWaiterResponse {
 		println("Smart Bell: Showing waiter response")
 		onMsg (accept : accept(X)) {
 			updateResource [# "$CurrentID --- Enter Now" #]
 		}
 		onMsg (inform : inform(MAX_TIME)) {
 			updateResource [# "$CurrentID --- Wait for " + payloadArg(0) #]
 		} 		
 		delay 1000
 	} Goto handleRequest
}
 
QActor barman context ctxtearoom {	
	
	State waitingOrder initial {
		println("Barman waiting for an order")		
	} Transition t0 whenMsg transmitOrder -> prepareTea 
	
	State prepareTea {
		println("Barman preparing tea")			
		onMsg (transmitOrder : transmitOrder(TABLE)) {
			[# val CurrentTable = payloadArg(0) #]
			forward waiter -m   teaReady : teaReady(CurrentTable)
		}		
	} Goto waitingOrder	
} 
