/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var Table0 = "clean"	
				var Table1 = "clean"		
				
				val InactivityTime = 30000L
				val MaxTime = 1000			
				val map = "teaRoomExplored"
				var CurrentClientID = ""
				var ServingTable = 0
				
				val EntranceX = 1
				val EntranceY = 4 
				val Table0X = 2
				val Table0Y = 2 
				val Table1X = 4 
				val Table1Y = 2
				val ExitX = 5
				val ExitY = 4
				val BarmanX = 5
		 		val BarmanY = 0
		 		val HomeX = 0
		 		val HomeY = 0
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("Waiter  : Started")
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( map  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						println("Waiter  : handleRequest")
						updateResourceRep( """{"state":"handleRequest"}"""  
						)
						emit("updateWaiterHandleRequest", "updateWaiterHandleRequest(X)" ) 
						stateTimer = TimerActor("timer_handleRequest", 
							scope, context!!, "local_tout_waiter_handleRequest", InactivityTime )
					}
					 transition(edgeName="t00",targetState="goHome",cond=whenTimeout("local_tout_waiter_handleRequest"))   
					transition(edgeName="t01",targetState="tableCheck",cond=whenRequest("enterRequest"))
					transition(edgeName="t02",targetState="transmitToBarman",cond=whenDispatch("order"))
					transition(edgeName="t03",targetState="serve",cond=whenDispatch("teaReady"))
					transition(edgeName="t04",targetState="collect",cond=whenDispatch("payment"))
					transition(edgeName="t05",targetState="collect",cond=whenDispatch("maxStayTimeExpired"))
				}	 
				state("tableCheck") { //this:State
					action { //it:State
						println("Waiter  : Checking tables")
						if( checkMsgContent( Term.createTerm("enterRequest(X)"), Term.createTerm("enterRequest(CLIENT_ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentClientID = payloadArg(0)  
						}
						delay(1000) 
						if(  Table0 == "clean" || Table1 == "clean"  
						 ){answer("enterRequest", "accept", "accept(X)"   )  
						}
						else
						 {answer("enterRequest", "inform", "inform($MaxTime)"   )  
						 }
						updateResourceRep( """{"state":"tablecheck","table0":"$Table0","table1":"$Table1"}"""  
						)
						emit("updateTableCheck", "updateTableCheck($Table0,$Table1)" ) 
					}
					 transition( edgeName="goto",targetState="reachEntrance", cond=doswitchGuarded({ Table0 == "clean" || Table1 == "clean"  
					}) )
					transition( edgeName="goto",targetState="handleRequest", cond=doswitchGuarded({! ( Table0 == "clean" || Table1 == "clean"  
					) }) )
				}	 
				state("reachEntrance") { //this:State
					action { //it:State
						println("Waiter  : Reaching Entrance")
						updateResourceRep( "[reachEntrance]"  
						)
						request("movetoCell", "movetoCell($EntranceX,$EntranceY)" ,"walker" )  
					}
					 transition(edgeName="t06",targetState="convoyClient",cond=whenReply("atcell"))
				}	 
				state("convoyClient") { //this:State
					action { //it:State
						println("Waiter  : Reaching Table")
						 var TargetTable = 0  
						if(  Table0 == "clean"  
						 ){ TargetTable = 0  
						}
						if(  Table0 == "dirty" && Table1 == "clean"  
						 ){ TargetTable = 1  
						}
						if(  TargetTable == 0  
						 ){ Table0 = "dirty"	 
						request("movetoCell", "movetoCell($Table0X,$Table0Y)" ,"walker" )  
						}
						if(  TargetTable == 1  
						 ){ Table1 = "dirty"	 
						request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
						}
						updateResourceRep( """{"state":"convoyClient","target":$TargetTable,"table0":"$Table0","table1":"$Table1"}"""  
						)
						emit("updateConvoyClient", "updateConvoyClient($TargetTable,$Table0,$Table1)" ) 
					}
					 transition(edgeName="t07",targetState="handleRequest",cond=whenReply("atcell"))
				}	 
				state("transmitToBarman") { //this:State
					action { //it:State
						println("Waiter  : Transmitting order to barman")
						if( checkMsgContent( Term.createTerm("order(TEA,TABLE)"), Term.createTerm("order(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  
												val Tea = payloadArg(0)
												val Table = payloadArg(1)						 
								forward("transmitOrder", "transmitOrder($Tea,$Table)" ,"barman" ) 
								updateResourceRep( """{"state":"transmitToBarman","tea":"$Tea","table":$Table}"""  
								)
								emit("updateTransmit", "updateTransmit($Tea,$Table)" ) 
						}
					}
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("serve") { //this:State
					action { //it:State
						println("Waiter  : Going to serve the client")
						if( checkMsgContent( Term.createTerm("teaReady(TEA,TABLE)"), Term.createTerm("teaReady(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Tea = payloadArg(0)
												ServingTable = payloadArg(1).toInt() 
								updateResourceRep( """{"state":"serve","tea":"$Tea","table":$ServingTable}"""  
								)
								request("movetoCell", "movetoCell($BarmanX,$BarmanY)" ,"walker" )  
						}
					}
					 transition(edgeName="t08",targetState="deliverTea",cond=whenReply("atcell"))
				}	 
				state("deliverTea") { //this:State
					action { //it:State
						println("Waiter  : delivering tea")
						if(  ServingTable == 0  
						 ){request("movetoCell", "movetoCell($Table0X,$Table0Y)" ,"walker" )  
						}
						if(  ServingTable == 1  
						 ){request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
						}
						updateResourceRep( """{"state":"deliverTea","table":$ServingTable}"""  
						)
						emit("updateDeliver", "updateDeliver($ServingTable)" ) 
					}
					 transition(edgeName="t09",targetState="enableTimer",cond=whenReply("atcell"))
				}	 
				state("enableTimer") { //this:State
					action { //it:State
						println("Waiter  : enabling timer")
						if(  ServingTable == 0  
						 ){forward("startTimer0", "startTimer0(X)" ,"timer0" ) 
						}
						if(  ServingTable == 1  
						 ){forward("startTimer1", "startTimer1(X)" ,"timer1" ) 
						}
						updateResourceRep( """{"state":"enableTimer","table":$ServingTable}"""  
						)
					}
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("collect") { //this:State
					action { //it:State
						println("Waiter  : Collecting the payment")
						if( checkMsgContent( Term.createTerm("payment(TABLE)"), Term.createTerm("payment(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ServingTable = payloadArg(0).toInt()  
						}
						if( checkMsgContent( Term.createTerm("maxStayTimeExpired(TABLE)"), Term.createTerm("maxStayTimeExpired(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ServingTable = payloadArg(0).toInt()  
						}
						if(  ServingTable == 0  
						 ){request("movetoCell", "movetoCell($Table0X,$Table0Y)" ,"walker" )  
						forward("stopTimer0", "stopTimer0(X)" ,"timer0" ) 
						}
						if(  ServingTable == 1  
						 ){request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
						forward("stopTimer1", "stopTimer1(X)" ,"timer1" ) 
						}
						updateResourceRep( """{"state":"collect","table":$ServingTable}"""  
						)
						emit("updateCollect", "updateCollect($ServingTable)" ) 
					}
					 transition(edgeName="t010",targetState="convoyAtExit",cond=whenReply("atcell"))
				}	 
				state("convoyAtExit") { //this:State
					action { //it:State
						println("Waiter  : Taking the client to the exit")
						updateResourceRep( """{"state":"convoyAtExit"}"""  
						)
						request("movetoCell", "movetoCell($ExitX,$ExitY)" ,"walker" )  
					}
					 transition(edgeName="t011",targetState="cleanTable",cond=whenReply("atcell"))
				}	 
				state("cleanTable") { //this:State
					action { //it:State
						updateResourceRep( """{"state":"cleanTable","table":$ServingTable}"""  
						)
						println("Waiter  : Cleaning the table")
						if(  ServingTable == 0  
						 ){request("movetoCell", "movetoCell($Table0X,$Table0Y)" ,"walker" )  
						}
						if(  ServingTable == 1  
						 ){request("movetoCell", "movetoCell($Table1X,$Table1Y)" ,"walker" )  
						}
					}
					 transition(edgeName="t012",targetState="setTableClean",cond=whenReply("atcell"))
				}	 
				state("setTableClean") { //this:State
					action { //it:State
						println("Waiter  : the table is clean")
						if(  ServingTable == 0  
						 ){ Table0 = "clean"  
						}
						if(  ServingTable == 1  
						 ){ Table1 = "clean"  
						}
						updateResourceRep( """{"state":"setTableClean","table":$ServingTable}"""  
						)
						emit("updateTableClean", "updateTableClean($ServingTable)" ) 
						delay(500) 
					}
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("goHome") { //this:State
					action { //it:State
						println("Waiter  : Going home")
						request("movetoCell", "movetoCell($HomeX,$HomeY)" ,"walker" )  
					}
					 transition(edgeName="t013",targetState="handleRequest",cond=whenReply("atcell"))
				}	 
			}
		}
}
