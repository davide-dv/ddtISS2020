/* Generated by AN DISI Unibo */ 
package it.unibo.tearoom

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tearoom ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "listening"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var FreeTables = 2
				
		return { //this:ActionBasciFsm
				state("listening") { //this:State
					action { //it:State
						println("Tearoom: Started and listening")
						updateResourceRep( FreeTables.toString()  
						)
					}
					 transition(edgeName="t010",targetState="transmitFreeTables",cond=whenRequest("askFreeTables"))
					transition(edgeName="t011",targetState="updateFreeTables",cond=whenEvent("tableOccupied"))
					transition(edgeName="t012",targetState="updateFreeTables",cond=whenEvent("tableCleaned"))
				}	 
				state("transmitFreeTables") { //this:State
					action { //it:State
						println("Tearoom: Communicating the number of free tables")
						answer("askFreeTables", "replyFreeTables", "replyFreeTables($FreeTables)"   )  
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("updateFreeTables") { //this:State
					action { //it:State
						println("Tearoom: Updating the number of free tables")
						if( checkMsgContent( Term.createTerm("tableOccupied(NUM)"), Term.createTerm("tableOccupied(NUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 FreeTables --  
								println("Free tables: $FreeTables")
						}
						if( checkMsgContent( Term.createTerm("tableCleaned(NUM)"), Term.createTerm("tableCleaned(NUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 FreeTables ++  
								println("Free tables: $FreeTables")
						}
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
			}
		}
}
