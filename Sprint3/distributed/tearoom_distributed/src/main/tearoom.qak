/* 
 * ================================================================================
 * waiter.qak
 * VERSION June 1, 2020 
 * 
 * External MQTT sites:
 * 	"mqtt.eclipse.org:  mosquitto.org mqtt.fluux.io  broker.hivemq.com
 * ================================================================================
 */ 

 
System   tearoom

// client --> smartbell 
Dispatch notify : notify(X)
// smartbell --> client : show on display (temperature, ID, maxwait)

// smartbell --> waiter
Request enterRequest : enterRequest(X)
// waiter --> smartbell
Reply accept : accept(X)	
Reply inform : inform(MAX_WAIT)
// client --> waiter
Dispatch order : order(TEA, TABLE)
// waiter --> barman
Dispatch transmitOrder : transmitOrder(TEA, TABLE)
// barman --> waiter
Dispatch teaReady : teaReady(TEA, TABLE)
// client --> waiter
Dispatch payment : payment(TABLE)
// timer --> waiter 
Dispatch maxStayTimeExpired : maxStayTimeExpired(TABLE)

// waiter events
Event updateTableCheck : updateTableCheck(TABLE0, TABLE1)
Event updateConvoyClient : updateConvoyClient(TARGET, TABLE0, TABLE1)
Event updateTransmit : updateTransmit(TEA, TABLE)
Event updateDeliver : updateDeliver(TABLE)
Event updateCollect : updateCollect(TABLE)
Event updateTableClean : updateTableClean(TABLE)
Event updateWaiterHandleRequest : updateWaiterHandleRequest(X)
// smartbell events
Event updateCheckTemperature : updateCheckTemperature(CLIENTID, RESULT)
Event updateWaiterResponse : updateWaiterResponse(CLIENTID, MSG)
Event updateSmartbellHandleRequest : updateSmartbellHandleRequest(X)
// barman events
Event updatePrepareTea : updatePrepareTea(TEA, TABLE)
Event updateBarmanWaitingOrder : updateBarmanWaitingOrder(X)
 


// waiter --> timer
Dispatch startTimer0 : startTimer0(X)
Dispatch startTimer1 : startTimer1(X)
Dispatch stopTimer0 : stopTimer0(X)
Dispatch stopTimer1 : stopTimer1(X)

// ----- walker ------
	
Request  movetoCell : movetoCell(X,Y)
Reply    atcell     : atcell(X,Y)
Reply	 walkbreak  : walkbreak(X,Y) 

Dispatch cmd       : cmd(MOVE)
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(V) 

Context ctxtearoom   ip [host="tearoomhost" port=8050]
Context ctxwaiter ip [host="waiterhost" port=8021]
Context ctxsmartbell ip [host="smartbellhost" port=8022]
Context ctxbarman ip [host="barmanhost" port=8023]

ExternalQActor smartbell context ctxsmartbell
ExternalQActor waiter context ctxwaiter
ExternalQActor barman context ctxbarman

QActor timer0 context ctxtearoom {
	
	[# 
		val Table = 0
		val MaxStayTime = 30000L	
	#]
	
	State handleRequest initial {
		println("Timer0: waiting for requests")
		updateResource [# """{"state":"handleRequest"}""" #]
	} Transition t0 whenMsg startTimer0 -> enable
	
	State enable {
		println("Timer0: Enabling the timer")
		updateResource [# """{"state":"enable"}""" #]		
	} Transition t1 whenTimeVar MaxStayTime -> notifyTimeElapsed
					whenMsg stopTimer0 -> handleRequest
	
	State notifyTimeElapsed {
		println("Timer0: notifying time elapsed")
		updateResource [# """{"state":"notifyTimeElapsed"}""" #]
		forward waiter -m maxStayTimeExpired : maxStayTimeExpired($Table)		
	} Goto handleRequest	
}

QActor timer1 context ctxtearoom {
	
	[# 
		val Table = 1
		val MaxStayTime = 30000L	
	#]
	
	State handleRequest initial {
		println("Timer1: waiting for requests")
		updateResource [# """{"state":"handleRequest"}""" #]
	} Transition t0 whenMsg startTimer1 -> enable
	
	State enable {
		println("Timer1: Enabling the timer")
		updateResource [# """{"state":"enable"}""" #]		
	} Transition t1 whenTimeVar MaxStayTime -> notifyTimeElapsed
					whenMsg stopTimer1 -> handleRequest
	
	State notifyTimeElapsed {
		println("Timer1: notifying time elapsed")
		updateResource [# """{"state":"notifyTimeElapsed"}""" #]
		forward waiter -m maxStayTimeExpired : maxStayTimeExpired($Table)		
	} Goto handleRequest	
} 

QActor knowledgebase context ctxtearoom {
	
	[#
		var Waiter = """{}"""
		var Smartbell = """{}"""
		var Barman = """{}"""
		var Status = """{"smartbell": """ + Smartbell + ""","waiter": """+ Waiter +""", "barman":""" + Barman +""" }"""
	#]
	
	State handleUpdate initial {
		println("Knowledge base ready to receive updates.")
		
	} Transition t0 whenEvent updateCheckTemperature -> setStatus
					whenEvent updateWaiterResponse -> setStatus
					whenEvent updateTableCheck -> setStatus
					whenEvent updateConvoyClient -> setStatus
					whenEvent updateTransmit -> setStatus
					whenEvent updateDeliver -> setStatus
					whenEvent updateCollect -> setStatus
					whenEvent updateTableClean -> setStatus
					whenEvent updatePrepareTea -> setStatus
					whenEvent updateWaiterHandleRequest -> setStatus
					whenEvent updateSmartbellHandleRequest -> setStatus
					whenEvent updateBarmanWaitingOrder -> setStatus
	
	State setStatus {
		println("Knowledge base setting the state.")
		
		onMsg(updateSmartbellHandleRequest : updateSmartbellHandleRequest(X)) {
			[# 					
				Smartbell = """{"state":"handleRequest"}"""						
			#]
		}
		
		onMsg(updateCheckTemperature : updateCheckTemperature(CLIENTID, RESULT)) {
			[# 				
				val ClientID = payloadArg(0)
				val Result = payloadArg(1)
				Smartbell = """{"state":"checkTemperature","clientID":""" +ClientID+ ""","msg":"""" +Result+ """"}"""						
			#]													
		}
		onMsg(updateWaiterResponse : updateWaiterResponse(CLIENTID, MSG)) {
			[# 				
				val ClientID = payloadArg(0)
				val Msg = payloadArg(1)				
				if (Msg.contains("Enter")) {
					Smartbell = """{"state":"showWaiterResponse","clientID":""" +ClientID+ ""","msg":"""" +Msg+ """"}"""
				} else {
					Smartbell = """{"state":"showWaiterResponse","clientID":""" +ClientID+ ""","msg":"Wait for """ +Msg+ """"}"""					
				}						
			#]											
		}
		
		onMsg(updateWaiterHandleRequest : updateWaiterHandleRequest(X)) {
			[#						
				Waiter = """{"state":"handleRequest"}"""						
			#]		
		}
		
		onMsg(updateTableCheck : updateTableCheck(TABLE0, TABLE1)) {
			[# 				
				val Table0 = payloadArg(0)
				val Table1 = payloadArg(1)
				Waiter = """{"state":"tableCheck","table0":"""" +Table0+ """","table1":"""" +Table1+ """"}"""						
			#]											
		}
		onMsg(updateConvoyClient : updateConvoyClient(TARGET, TABLE0, TABLE1)) {
			[# 				
				val Target = payloadArg(0)
				val Table0 = payloadArg(1)
				val Table1 = payloadArg(2)
				Waiter = """{"state":"convoyClient", "target":"""+Target+""","table0":"""" +Table0+ """","table1":"""" +Table1+ """"}"""						
			#]											
		}
		onMsg(updateTransmit : updateTransmit(TEA, TABLE)) {
			[# 				
				val Tea = payloadArg(0)
				val Table = payloadArg(1)				
				Waiter = """{"state":"transmitToBarman", "tea":""""+Tea+"""","table":""" +Table+ """}"""						
			#]		
		}
		onMsg(updateDeliver : updateDeliver(TABLE)) {
			[# 						
				val Table = payloadArg(0)				
				Waiter = """{"state":"deliverTea","table":""" +Table+ """}"""						
			#]			
		}
		onMsg(updateCollect : updateCollect(TABLE)) {
			[# 						
				val Table = payloadArg(0)				
				Waiter = """{"state":"collect","table":""" +Table+ """}"""						
			#]			
		}
		onMsg(updateTableClean : updateTableClean(TABLE)) {
			[# 						
				val Table = payloadArg(0)				
				Waiter = """{"state":"setTableClean","table":""" +Table+ """}"""						
			#]													
		}
		
		onMsg(updateBarmanWaitingOrder : updateBarmanWaitingOrder(X)) {
			[# 							
				Barman = """{"state":"waitingOrder"}"""						
			#]
		}
		
		onMsg(updatePrepareTea : updatePrepareTea(TEA, TABLE)) {
			[# 				
				val Tea = payloadArg(0)
				val Table = payloadArg(1)				
				Barman = """{"state":"prepareTea", "tea":""""+Tea+"""","table":""" +Table+ """}"""						
			#]		
		}		
		[# Status = """{"smartbell": """ + Smartbell + ""","waiter": """+ Waiter +""", "barman":""" + Barman +""" }""" #]
		updateResource [# Status #]
				
	} Goto handleUpdate
	
}


