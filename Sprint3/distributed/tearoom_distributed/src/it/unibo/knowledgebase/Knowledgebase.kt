/* Generated by AN DISI Unibo */ 
package it.unibo.knowledgebase

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Knowledgebase ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "handleUpdate"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Waiter = """{}"""
				var Smartbell = """{}"""
				var Barman = """{}"""
				var Status = """{"smartbell": """ + Smartbell + ""","waiter": """+ Waiter +""", "barman":""" + Barman +""" }"""
		return { //this:ActionBasciFsm
				state("handleUpdate") { //this:State
					action { //it:State
						println("Knowledge base ready to receive updates.")
					}
					 transition(edgeName="t06",targetState="setStatus",cond=whenEvent("updateCheckTemperature"))
					transition(edgeName="t07",targetState="setStatus",cond=whenEvent("updateWaiterResponse"))
					transition(edgeName="t08",targetState="setStatus",cond=whenEvent("updateTableCheck"))
					transition(edgeName="t09",targetState="setStatus",cond=whenEvent("updateConvoyClient"))
					transition(edgeName="t010",targetState="setStatus",cond=whenEvent("updateTransmit"))
					transition(edgeName="t011",targetState="setStatus",cond=whenEvent("updateDeliver"))
					transition(edgeName="t012",targetState="setStatus",cond=whenEvent("updateCollect"))
					transition(edgeName="t013",targetState="setStatus",cond=whenEvent("updateTableClean"))
					transition(edgeName="t014",targetState="setStatus",cond=whenEvent("updatePrepareTea"))
					transition(edgeName="t015",targetState="setStatus",cond=whenEvent("updateWaiterHandleRequest"))
					transition(edgeName="t016",targetState="setStatus",cond=whenEvent("updateSmartbellHandleRequest"))
					transition(edgeName="t017",targetState="setStatus",cond=whenEvent("updateBarmanWaitingOrder"))
				}	 
				state("setStatus") { //this:State
					action { //it:State
						println("Knowledge base setting the state.")
						if( checkMsgContent( Term.createTerm("updateSmartbellHandleRequest(X)"), Term.createTerm("updateSmartbellHandleRequest(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 					
												Smartbell = """{"state":"handleRequest"}"""						
						}
						if( checkMsgContent( Term.createTerm("updateCheckTemperature(CLIENTID,RESULT)"), Term.createTerm("updateCheckTemperature(CLIENTID,RESULT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 				
												val ClientID = payloadArg(0)
												val Result = payloadArg(1)
												Smartbell = """{"state":"checkTemperature","clientID":""" +ClientID+ ""","msg":"""" +Result+ """"}"""						
						}
						if( checkMsgContent( Term.createTerm("updateWaiterResponse(CLIENTID,MSG)"), Term.createTerm("updateWaiterResponse(CLIENTID,MSG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 				
												val ClientID = payloadArg(0)
												val Msg = payloadArg(1)				
												if (Msg.contains("Enter")) {
													Smartbell = """{"state":"showWaiterResponse","clientID":""" +ClientID+ ""","msg":"""" +Msg+ """"}"""
												} else {
													Smartbell = """{"state":"showWaiterResponse","clientID":""" +ClientID+ ""","msg":"Wait for """ +Msg+ """"}"""					
												}						
						}
						if( checkMsgContent( Term.createTerm("updateWaiterHandleRequest(X)"), Term.createTerm("updateWaiterHandleRequest(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
														
												Waiter = """{"state":"handleRequest"}"""						
						}
						if( checkMsgContent( Term.createTerm("updateTableCheck(TABLE0,TABLE1)"), Term.createTerm("updateTableCheck(TABLE0,TABLE1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 				
												val Table0 = payloadArg(0)
												val Table1 = payloadArg(1)
												Waiter = """{"state":"tableCheck","table0":"""" +Table0+ """","table1":"""" +Table1+ """"}"""						
						}
						if( checkMsgContent( Term.createTerm("updateConvoyClient(TARGET,TABLE0,TABLE1)"), Term.createTerm("updateConvoyClient(TARGET,TABLE0,TABLE1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 				
												val Target = payloadArg(0)
												val Table0 = payloadArg(1)
												val Table1 = payloadArg(2)
												Waiter = """{"state":"convoyClient", "target":"""+Target+""","table0":"""" +Table0+ """","table1":"""" +Table1+ """"}"""						
						}
						if( checkMsgContent( Term.createTerm("updateTransmit(TEA,TABLE)"), Term.createTerm("updateTransmit(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 				
												val Tea = payloadArg(0)
												val Table = payloadArg(1)				
												Waiter = """{"state":"transmitToBarman", "tea":""""+Tea+"""","table":""" +Table+ """}"""						
						}
						if( checkMsgContent( Term.createTerm("updateDeliver(TABLE)"), Term.createTerm("updateDeliver(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 						
												val Table = payloadArg(0)				
												Waiter = """{"state":"deliverTea","table":""" +Table+ """}"""						
						}
						if( checkMsgContent( Term.createTerm("updateCollect(TABLE)"), Term.createTerm("updateCollect(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 						
												val Table = payloadArg(0)				
												Waiter = """{"state":"collect","table":""" +Table+ """}"""						
						}
						if( checkMsgContent( Term.createTerm("updateTableClean(TABLE)"), Term.createTerm("updateTableClean(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 						
												val Table = payloadArg(0)				
												Waiter = """{"state":"setTableClean","table":""" +Table+ """}"""						
						}
						if( checkMsgContent( Term.createTerm("updateBarmanWaitingOrder(X)"), Term.createTerm("updateBarmanWaitingOrder(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 							
												Barman = """{"state":"waitingOrder"}"""						
						}
						if( checkMsgContent( Term.createTerm("updatePrepareTea(TEA,TABLE)"), Term.createTerm("updatePrepareTea(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 				
												val Tea = payloadArg(0)
												val Table = payloadArg(1)				
												Barman = """{"state":"prepareTea", "tea":""""+Tea+"""","table":""" +Table+ """}"""						
						}
						 Status = """{"smartbell": """ + Smartbell + ""","waiter": """+ Waiter +""", "barman":""" + Barman +""" }"""  
						updateResourceRep( Status  
						)
					}
					 transition( edgeName="goto",targetState="handleUpdate", cond=doswitch() )
				}	 
			}
		}
}
