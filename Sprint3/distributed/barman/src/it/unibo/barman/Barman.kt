/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "waitingOrder"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("waitingOrder") { //this:State
					action { //it:State
						println("Barman waiting for an order")
						updateResourceRep( """{"state":"waitingOrder"}"""  
						)
						emit("updateBarmanWaitingOrder", "updateBarmanWaitingOrder(X)" ) 
					}
					 transition(edgeName="t00",targetState="prepareTea",cond=whenDispatch("transmitOrder"))
				}	 
				state("prepareTea") { //this:State
					action { //it:State
						println("Barman preparing tea")
						if( checkMsgContent( Term.createTerm("transmitOrder(TEA,TABLE)"), Term.createTerm("transmitOrder(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Tea = payloadArg(0)
												val CurrentTable = payloadArg(1) 
								forward("teaReady", "teaReady($Tea,$CurrentTable)" ,"waiter" ) 
								updateResourceRep( """{"state":"prepareTea","tea":"$Tea","table":$CurrentTable}"""  
								)
								emit("updatePrepareTea", "updatePrepareTea($Tea,$CurrentTable)" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitingOrder", cond=doswitch() )
				}	 
			}
		}
}
